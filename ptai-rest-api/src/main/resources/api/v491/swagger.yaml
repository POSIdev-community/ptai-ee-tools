openapi: 3.0.1
info:
  title: Current API v11
  description: 'API path is case sensitive. To specify the API version in your request, add v{version} after api/ in the address. For example, api/v11/auth.'
  version: '11'
paths:
  '/api/history/projects/{projectId}':
    get:
      tags:
        - ChangeHistory
      summary: Project history
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: entityId
          in: query
          description: Related entity id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/history/projects/{projectId}/row/{id}':
    get:
      tags:
        - ChangeHistory
      summary: Project history row
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Row id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/history/projects/{projectId}/{objectType}':
    get:
      tags:
        - ChangeHistory
      summary: Project history
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: objectType
          in: path
          description: Related entity type
          required: true
          schema:
            $ref: '#/components/schemas/ChangeObjectType'
        - name: entityId
          in: query
          description: Related entity id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/configs/securityPoliciesTemplate:
    get:
      tags:
        - Configs
      summary: Get policies rules template
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
  '/api/configs/sastRulesTemplate/{language}':
    get:
      tags:
        - Configs
      summary: Get policies rules template
      parameters:
        - name: language
          in: path
          description: Project id
          required: true
          schema:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SastRuleModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SastRuleModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/configs/sast/{language}':
    get:
      tags:
        - Configs
      summary: Get SAST rule by language group
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SastRuleModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SastRuleModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update SAST rule
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
      requestBody:
        description: SAST rules
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SastRuleModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SastRuleModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SastRuleModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SastRuleModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/configs/pmRules:
    get:
      tags:
        - Configs
      summary: Get pattern matching rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PmRuleModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PmRuleModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Configs
      summary: Add pattern matching rule
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/configs/pmRules/export:
    post:
      tags:
        - Configs
      summary: Export pattern matching rules
      description: "Request to export a list of PM rules.\r\nThe response will be a file in .json format when exporting one rule, or .zip when exporting several."
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: string
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/*+json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/configs/pmRules/import:
    post:
      tags:
        - Configs
      summary: Import pattern matching rules
      description: Request to import a list of PM rules.
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/configs/pmRules/{id}':
    delete:
      tags:
        - Configs
      summary: Delete pattern matching rule by it's identifier
      parameters:
        - name: id
          in: path
          description: Pattern matching rule identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Configs
      summary: Get pattern matching rule by it's identifier
      parameters:
        - name: id
          in: path
          description: Pattern matching rule identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmRuleModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PmRuleModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update pattern matching rule by it's identifier
      parameters:
        - name: id
          in: path
          description: Pattern matching rule identifier
          required: true
          schema:
            type: string
      requestBody:
        description: Pattern matching rule
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PmRuleCreateUpdateModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/directoryContent/{projectId}':
    get:
      tags:
        - DirectoryContent
      summary: Get project`s directory content information
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: depth
          in: query
          description: Depth of expanding of elements
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the directory content information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryContent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/directoryContent/{projectId}/{path}':
    get:
      tags:
        - DirectoryContent
      summary: Get project`s directory content information
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: path
          in: path
          description: Subdirectory path. For root set empty
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Depth of expanding of elements
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the directory content information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryContent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/external/providers:
    get:
      tags:
        - ExternalAuth
      summary: Get external auth providers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthProviderSettingsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthProviderSettingsModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - ExternalAuth
      summary: Create external auth provider
      parameters:
        - name: Provider
          in: query
          schema:
            $ref: '#/components/schemas/AuthProviderSettingsBaseModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SigningCertificateFile:
                  type: string
                  format: binary
                SigningPrivateKeyFile:
                  type: string
                  format: binary
                CaCertificateFile:
                  type: string
                  format: binary
                AuthCertificateFile:
                  type: string
                  format: binary
                PrivateKeyFile:
                  type: string
                  format: binary
            encoding:
              SigningCertificateFile:
                style: form
              SigningPrivateKeyFile:
                style: form
              CaCertificateFile:
                style: form
              AuthCertificateFile:
                style: form
              PrivateKeyFile:
                style: form
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/external/providers/{providerId}':
    delete:
      tags:
        - ExternalAuth
      summary: Delete external auth provider
      parameters:
        - name: providerId
          in: path
          description: Provider`s id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - ExternalAuth
      summary: Get external auth provider by Id
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProviderSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthProviderSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - ExternalAuth
      summary: Update external auth provider
      parameters:
        - name: providerId
          in: path
          description: Provider identifier
          required: true
          schema:
            type: string
        - name: Provider
          in: query
          schema:
            $ref: '#/components/schemas/AuthProviderSettingsBaseModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SigningCertificateFile:
                  type: string
                  format: binary
                SigningPrivateKeyFile:
                  type: string
                  format: binary
                CaCertificateFile:
                  type: string
                  format: binary
                AuthCertificateFile:
                  type: string
                  format: binary
                PrivateKeyFile:
                  type: string
                  format: binary
            encoding:
              SigningCertificateFile:
                style: form
              SigningPrivateKeyFile:
                style: form
              CaCertificateFile:
                style: form
              AuthCertificateFile:
                style: form
              PrivateKeyFile:
                style: form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/external/ldap/{providerId}/syncState':
    get:
      tags:
        - ExternalAuth
      summary: Get current users synchronization status via ldap provider connection
      parameters:
        - name: providerId
          in: path
          description: Provider`s id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapSyncStatus'
            text/json:
              schema:
                $ref: '#/components/schemas/LdapSyncStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/external/ldap/{providerId}/sync':
    post:
      tags:
        - ExternalAuth
      summary: Synchronize users via ldap provider connection
      parameters:
        - name: providerId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/external/test/ldap:
    post:
      tags:
        - ExternalAuth
      summary: Test connection for LDAP settings
      parameters:
        - name: Ldap
          in: query
          schema:
            $ref: '#/components/schemas/LdapSettingsModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                CaCertificateFile:
                  type: string
                  format: binary
                AuthCertificateFile:
                  type: string
                  format: binary
                PrivateKeyFile:
                  type: string
                  format: binary
            encoding:
              CaCertificateFile:
                style: form
              AuthCertificateFile:
                style: form
              PrivateKeyFile:
                style: form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/external/test/openid:
    post:
      tags:
        - ExternalAuth
      summary: Test connection for OpenId settings
      parameters:
        - name: OpenIdSettings
          in: query
          schema:
            $ref: '#/components/schemas/OpenIdSettingsModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                CaCertificateFile:
                  type: string
                  format: binary
            encoding:
              CaCertificateFile:
                style: form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/external/signin:
    get:
      tags:
        - ExternalAuth
      summary: External signin. Just redirects to external application login page
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /api/auth/external/signin/complete:
    get:
      tags:
        - ExternalAuth
      summary: complete sign in
      parameters:
        - name: Code
          in: query
          schema:
            type: string
        - name: ScopeType
          in: query
          schema:
            $ref: '#/components/schemas/AuthScope'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResultModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthResultModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/external/providers/{providerId}/saml2_metadata':
    get:
      tags:
        - ExternalAuth
      summary: Generate Saml2 metadata by provider id
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/fileContent/{projectId}/{file}':
    get:
      tags:
        - FileContent
      summary: File content
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: file
          in: path
          description: Relative file path in project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  '/api/fileContent/{projectId}/scanResults/{scanResultId}/VfsNode':
    get:
      tags:
        - FileContent
      summary: File content by Node path
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
        - name: nodePath
          in: query
          description: Node path
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  /health/summary:
    get:
      tags:
        - HealthCheck
      summary: Health check of services. Response time in milliseconds
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckSummaryResult'
  /api/tracker/trackers:
    get:
      tags:
        - IssueTracker
      summary: Get available trackers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerModel'
        '401':
          description: Unauthorized
  /api/tracker/connections:
    get:
      tags:
        - IssueTracker
      summary: Get all connections with settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionSettingsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionSettingsModel'
        '401':
          description: Unauthorized
  /api/tracker/connections/light:
    get:
      tags:
        - IssueTracker
      summary: Get all light connection list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{id}':
    delete:
      tags:
        - IssueTracker
      summary: Delete connection setting
      parameters:
        - name: id
          in: path
          description: Connection setting identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - IssueTracker
      summary: Get connection setting by it's identifier
      parameters:
        - name: id
          in: path
          description: Connection setting identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ConnectionSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - IssueTracker
      summary: Set connection setting
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skipUpdateCredentials
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/tracker/connections/test:
    post:
      tags:
        - IssueTracker
      summary: Test connection
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects':
    get:
      tags:
        - IssueTracker
      summary: Get projects for connection by it's identifier
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInfoModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/tickets/{key}':
    get:
      tags:
        - IssueTracker
      summary: Get ticket by key
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: key
          in: path
          description: Ticket key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketModels'
            text/json:
              schema:
                $ref: '#/components/schemas/TicketModels'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/tickets':
    post:
      tags:
        - IssueTracker
      summary: Create ticket
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Ticket
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          application/json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          text/json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TicketModels'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseTicketLinkModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseTicketLinkModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/ticketTypes':
    get:
      tags:
        - IssueTracker
      summary: Get project ticket types
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          description: Project name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/priorities':
    get:
      tags:
        - IssueTracker
      summary: Get priorities
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriorityTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriorityTypeModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/users':
    get:
      tags:
        - IssueTracker
      summary: Get users
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTrackerModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTrackerModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/fields/{ticketType}':
    get:
      tags:
        - IssueTracker
      summary: Get ticket fields
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          description: Project
          required: true
          schema:
            type: string
        - name: ticketType
          in: path
          description: Ticket type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldInfoModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/fields/{ticketType}/optionValues':
    get:
      tags:
        - IssueTracker
      summary: Get options for ticket fields
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          description: Project
          required: true
          schema:
            type: string
        - name: ticketType
          in: path
          description: Ticket type
          required: true
          schema:
            type: string
        - name: fieldName
          in: query
          description: Field name
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionValueModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/statuses':
    get:
      tags:
        - IssueTracker
      summary: Get statuses
      parameters:
        - name: connectionId
          in: path
          description: Connection identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: ticketType
          in: query
          description: Ticket type
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/tracker/oauth1a/requestToken:
    post:
      tags:
        - IssueTrackerOauth1A
      summary: Get oauth request token
      parameters:
        - name: providerKey
          in: query
          description: Tracker name
          schema:
            type: string
        - name: host
          in: query
          description: Host
          schema:
            type: string
      requestBody:
        description: Authorization data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oauth1RequestTokenModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Oauth1RequestTokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/tracker/oauth1a/accessToken:
    post:
      tags:
        - IssueTrackerOauth1A
      summary: Get oauth access token
      parameters:
        - name: providerKey
          in: query
          description: Tracker name
          schema:
            type: string
        - name: host
          in: query
          description: Host
          schema:
            type: string
        - name: requestToken
          in: query
          description: Oauth request token
          schema:
            type: string
      requestBody:
        description: Authorization data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oauth1AccessTokenModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Oauth1AccessTokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license:
    get:
      tags:
        - License
      summary: Current license
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - License
      summary: Update license
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license/base:
    get:
      tags:
        - License
      summary: Current license base information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
        '401':
          description: Unauthorized
  /api/license/fingerprint:
    get:
      tags:
        - License
      summary: Get server fingerprint
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/logs:
    get:
      tags:
        - Logs
      summary: Get server`s logs
      parameters:
        - name: dateFrom
          in: query
          description: Date from
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: Date to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  /api/mailing/sendTestEmail:
    post:
      tags:
        - Mailing
      summary: Send test email
      parameters:
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
      requestBody:
        description: Test mail model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles:
    get:
      tags:
        - Mailing
      summary: Get all mail profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Mailing
      summary: Create mail profile
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles/light:
    get:
      tags:
        - Mailing
      summary: Get all light mail profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/mailing/mailProfiles/{mailProfileId}':
    delete:
      tags:
        - Mailing
      summary: Delete mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Mailing
      summary: Get mail profile model
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    patch:
      tags:
        - Mailing
      summary: Update mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/mailing/mailProfiles/{mailProfileId}/usedInProjects':
    get:
      tags:
        - Mailing
      summary: Get all projects when used mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/membership:
    get:
      tags:
        - Membership
      summary: Gets all members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Membership
      summary: Updates user membership
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateMemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateMemberModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/{userId}':
    get:
      tags:
        - Membership
      summary: Gets user membership
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/role/{roleId}':
    get:
      tags:
        - Membership
      summary: Find users by role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/project/{projectId}':
    get:
      tags:
        - Membership
      summary: Gets project members
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Membership
      summary: Adds project members
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateProjectMemberModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateProjectMemberModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateProjectMemberModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateProjectMemberModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Membership
      summary: Updates project member
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateProjectMemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectMemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectMemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProjectMemberModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/project/{projectId}/{userId}':
    delete:
      tags:
        - Membership
      summary: Deletes one project member
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/pmRuleVulnTypes:
    get:
      tags:
        - PmRuleVulnTypes
      summary: Get all pm vulnerability types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PmRuleVulnTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PmRuleVulnTypeModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - PmRuleVulnTypes
      summary: Create pm vulnerability type
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PmRuleVulnTypeCreatingModel'
          application/json:
            schema:
              $ref: '#/components/schemas/PmRuleVulnTypeCreatingModel'
          text/json:
            schema:
              $ref: '#/components/schemas/PmRuleVulnTypeCreatingModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PmRuleVulnTypeCreatingModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '401':
          description: Unauthorized
  '/api/pmRuleVulnTypes/{typeId}':
    delete:
      tags:
        - PmRuleVulnTypes
      summary: Delete pm vulnerability type
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
    get:
      tags:
        - PmRuleVulnTypes
      summary: Get pm vulnerability type
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmRuleVulnTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PmRuleVulnTypeModel'
        '401':
          description: Unauthorized
  /api/projects:
    get:
      tags:
        - Projects
      summary: Get projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}':
    delete:
      tags:
        - Projects
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Projects
      summary: Get project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/name/{name}':
    get:
      tags:
        - Projects
      summary: Get project by name without details
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{name}/exists':
    get:
      tags:
        - Projects
      summary: Check exists project by name
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults':
    get:
      tags:
        - Projects
      summary: Get all scan results of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResultModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/last':
    get:
      tags:
        - Projects
      summary: Get last scan result of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/base:
    post:
      tags:
        - Projects
      summary: Create project with base settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/extended:
    post:
      tags:
        - Projects
      summary: Create project with extended settings
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/blackBoxSettings':
    get:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlackBoxSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BlackBoxSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Extended box settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/withScans:
    get:
      tags:
        - Projects
      summary: Get projects with high vulnerabilities statistic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithScanInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithScanInfoModel'
        '401':
          description: Unauthorized
  '/api/projects/withScans/{projectId}':
    get:
      tags:
        - Projects
      summary: Get project with high vulnerabilities statistic
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithScanInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectWithScanInfoModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/issues':
    get:
      tags:
        - Projects
      summary: Get issues
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VulnerabilityModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VulnerabilityModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/issues/headers':
    get:
      tags:
        - Projects
      summary: Get issues headers
      parameters:
        - name: projectId
          in: path
          description: Project`s id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          description: locale to localize headers
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}':
    get:
      tags:
        - Projects
      summary: Get issue
      parameters:
        - name: projectId
          in: path
          description: Project`s id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityFullModel'
            text/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityFullModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/defaultSettings':
    get:
      tags:
        - Projects
      summary: Get default settings for existing project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/DefaultProjectSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/exclusions':
    get:
      tags:
        - Projects
      summary: Get exclusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update exclusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Exclusions Model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/defaultSettings:
    get:
      tags:
        - Projects
      summary: Get default settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/DefaultProjectSettingsModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/settings':
    get:
      tags:
        - Projects
      summary: Get project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/extendedSettings':
    put:
      tags:
        - Projects
      summary: Update project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Extended project settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/settingsChangingDate':
    get:
      tags:
        - Projects
      summary: Get date of last changing scan settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: date-time
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/completeConfiguration':
    post:
      tags:
        - Projects
      summary: Complete project configuration
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanSettings/{scanSettingsId}':
    get:
      tags:
        - Projects
      summary: Get scan settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanSettingsId
          in: path
          description: Scan settings id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanSettings/{scanSettingsId}/aiproj':
    get:
      tags:
        - Projects
      summary: Download aiproj file by scan settings id
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanSettingsId
          in: path
          description: Scan settings id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  '/api/projects/{projectId}/aiproj':
    get:
      tags:
        - Projects
      summary: Download aiproj file
      parameters:
        - name: projectId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  '/api/projects/{projectId}/securityPolicies':
    get:
      tags:
        - Projects
      summary: Get policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Security policies model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/sastRules':
    get:
      tags:
        - Projects
      summary: Get SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: SAST rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/pmRules':
    get:
      tags:
        - Projects
      summary: Get PM rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmRulesBaseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PmRulesBaseModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update PM rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: PM rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PmRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/PmRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/PmRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PmRulesBaseModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/analysisRules':
    get:
      tags:
        - Projects
      summary: Get analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Analysis rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}':
    delete:
      tags:
        - Projects
      summary: Delete scan result of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: ScanResult id
          required: true
          schema:
            type: string
            format: uuid
        - name: deleteGroup
          in: query
          description: Delete group ScanResult
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Projects
      summary: Get scan result of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: ScanResult id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/state':
    put:
      tags:
        - Projects
      summary: Change single issue approval state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/favorite':
    put:
      tags:
        - Projects
      summary: Change single issue favorite state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing favorite status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/state':
    put:
      tags:
        - Projects
      summary: Change many issues approval state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval statuses
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/favorite':
    put:
      tags:
        - Projects
      summary: Change many issues favorite state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing favorite statuses
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/errors':
    get:
      tags:
        - Projects
      summary: Get scan errors
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanErrorModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanErrorModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/extendedSettings':
    get:
      tags:
        - Projects
      summary: Get issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettingsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project id
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/links/{issueId}/jira':
    post:
      tags:
        - Projects
      summary: Link vulnerability with jira ticket
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Ticket link
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          application/json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          text/json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/links/{issueId}/jira/unlink':
    post:
      tags:
        - Projects
      summary: Unlink vulnerability with issue tracker ticket
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/activeScans:
    get:
      tags:
        - Projects
      summary: Active scans
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/resources':
    get:
      tags:
        - Projects
      summary: Get issue`s descriptions and metadata
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/pin':
    post:
      tags:
        - Projects
      summary: Pin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/unpin':
    post:
      tags:
        - Projects
      summary: Unpin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates:
    get:
      tags:
        - Reports
      summary: Get all reports templates
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
        - name: withContent
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Reports
      summary: Create report template
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/reports/templates/{id}':
    delete:
      tags:
        - Reports
      summary: Delete report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Reports
      summary: Get report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
        - name: needAddCss
          in: query
          description: Add CSS styles?
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Update report template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/reports/templates/{type}':
    get:
      tags:
        - Reports
      summary: Get report template by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ReportType'
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/reports/userTemplates/{name}':
    get:
      tags:
        - Reports
      summary: Get user report template by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates/check:
    post:
      tags:
        - Reports
      summary: Check template on errors. Pass template text in body
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/generate:
    post:
      tags:
        - Reports
      summary: "Generate report\r\nPass sessionId in model for progress notifications.\r\nsessionId will be removed when the report generation process becomes asynchronous"
      requestBody:
        description: Report generate model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  /api/reports/preview:
    post:
      tags:
        - Reports
      summary: Preview report
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  /api/reports/generateWafPatch:
    post:
      tags:
        - Reports
      summary: Generate WAF patch report
      requestBody:
        description: Report generate model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WafPatchGenerateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/WafPatchGenerateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/WafPatchGenerateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WafPatchGenerateModel'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/parameters:
    get:
      tags:
        - Reports
      summary: Get report parameters for current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Save report parameters for current user
      requestBody:
        description: Report parameters model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/roles:
    get:
      tags:
        - Role
      summary: Get all roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Role
      summary: Add role
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/roles/{roleId}':
    delete:
      tags:
        - Role
      summary: Delete role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Role
      summary: Get role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleModel'
            text/json:
              schema:
                $ref: '#/components/schemas/RoleModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Role
      summary: Update role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleUpsertModel'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents:
    get:
      tags:
        - ScanAgent
      summary: Get all scan agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}':
    delete:
      tags:
        - ScanAgent
      summary: Delete inactive or suspended agent
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - ScanAgent
      summary: Get scan agent by id
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}/pause':
    post:
      tags:
        - ScanAgent
      summary: Suspend agent
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: stopScan
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents/hasActive:
    get:
      tags:
        - ScanAgent
      summary: Check has active agents
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}/active':
    post:
      tags:
        - ScanAgent
      summary: 'Activate agent, i.e. set it''s status to Active'
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents/count:
    get:
      tags:
        - ScanAgent
      summary: Count all scan agents in any status
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: integer
                format: int32
        '401':
          description: Unauthorized
  /api/scans:
    get:
      tags:
        - ScanQueue
      summary: Get active items in scan queue
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanQueueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanQueueModel'
        '401':
          description: Unauthorized
  '/api/scans/{projectId}/start':
    post:
      tags:
        - ScanQueue
      summary: Start scan. Return scan result id
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          application/json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          text/json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/scans/{scanResultId}/stop':
    post:
      tags:
        - ScanQueue
      summary: Stop scan
      parameters:
        - name: scanResultId
          in: path
          description: Scan result id.Guid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scans/stop:
    post:
      tags:
        - ScanQueue
      summary: Stop all scans
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  /api/serverSettings/proxy:
    get:
      tags:
        - ServerSettings
      summary: Get proxy settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxySettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProxySettingsModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - ServerSettings
      summary: Update proxy settings
      requestBody:
        description: Proxy settings
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProxySettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ProxySettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProxySettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProxySettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/serverSettings/certificate:
    get:
      tags:
        - ServerSettings
      summary: Get current certificater
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CertificateInfoModel'
        '401':
          description: Unauthorized
  /api/settings/logs:
    get:
      tags:
        - Settings
      summary: Get logging settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LogSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: Update logging settings
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LogSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LogSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LogSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LogSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/logs/file:
    put:
      tags:
        - Settings
      summary: Update file logging settings
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LogLevelModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LogLevelModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LogLevelModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LogLevelModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/logs/external:
    put:
      tags:
        - Settings
      summary: Update external logging settings
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExternalLoggingSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalLoggingSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExternalLoggingSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExternalLoggingSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/storage:
    get:
      tags:
        - Settings
      summary: File storage settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStorageSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FileStorageSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: File storage settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileStorageSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FileStorageSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FileStorageSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileStorageSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/sso:
    get:
      tags:
        - Settings
      summary: Common SSO settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSOSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SSOSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: Common SSO settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SSOSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SSOSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SSOSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SSOSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/scanAgent:
    get:
      tags:
        - Settings
      summary: Scan agent connection settings information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanAgentConnectionSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanAgentConnectionSettingsModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/supportedCredentials/{vcsType}':
    get:
      tags:
        - SourceControl
      summary: Get supported credentials types
      parameters:
        - name: vcsType
          in: path
          description: Repostory type
          required: true
          schema:
            $ref: '#/components/schemas/RepositoryType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlCredentialsType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlCredentialsType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/sourceControl/project:
    post:
      tags:
        - SourceControl
      summary: Create temp project.
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/project/{projectId}':
    patch:
      tags:
        - SourceControl
      summary: Update projects source control connection settings.
      parameters:
        - name: projectId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/branches':
    get:
      tags:
        - SourceControl
      summary: Read branches from project`s repository.
      parameters:
        - name: project
          in: query
          description: Selected project. TFS only.
          schema:
            type: string
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/checkout':
    post:
      tags:
        - SourceControl
      summary: Checkout project`s repository. Pass settings in body. Progress send in the background in notifications
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: isNew
          in: query
          description: Flag of not stored settings
          schema:
            type: boolean
      requestBody:
        description: If null is passed null previous settings will be used
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/update':
    post:
      tags:
        - SourceControl
      summary: Update project`s repository. Pass settings in body. Progress send in the background in notifications
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/cancel/{operationId}':
    post:
      tags:
        - SourceControl
      summary: Cancel repository checkout
      parameters:
        - name: operationId
          in: path
          description: Operation id id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/projects':
    get:
      tags:
        - SourceControl
      summary: Get projects (TFS only)
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/store/project:
    post:
      tags:
        - Store
      summary: Create project with sources and default settings. Uploading sources in the background after returning project Id. Pass files in Form
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/store/project/archive:
    post:
      tags:
        - Store
      summary: Create project and default settings. Pass archive with sources in Form. Only one file shuold be passed
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/{projectId}/sources':
    get:
      tags:
        - Store
      summary: Download project sources
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
    post:
      tags:
        - Store
      summary: Upload sources using files collection
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: archived
          in: query
          description: Sources in archive
          schema:
            type: boolean
        - name: noNeedToActualize
          in: query
          description: Disable actualize settings by sources
          schema:
            type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: string
                  format: binary
            encoding:
              files:
                style: form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/store/uploadSession:
    post:
      tags:
        - Store
      summary: Create new upload session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UploadSessionModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/uploadSession/{uploadId}/cancel':
    post:
      tags:
        - Store
      summary: Cancel upload session and delete files
      parameters:
        - name: uploadId
          in: path
          description: Upload session id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/uploadSession/{uploadId}/add':
    post:
      tags:
        - Store
      summary: Upload some files to session. Pass files in Form
      parameters:
        - name: uploadId
          in: path
          description: Upload session id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/uploadSession/{uploadId}/project':
    post:
      tags:
        - Store
      summary: Create project with sources and default settings. Will use sources from specified upload session
      parameters:
        - name: uploadId
          in: path
          description: Upload session id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/uploadSession/{uploadId}/project/{projectId}':
    post:
      tags:
        - Store
      summary: Update project sources. Will use sources from specified upload session
      parameters:
        - name: uploadId
          in: path
          description: Upload session id
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: noNeedToActualize
          in: query
          description: Disable actualize settings by sources
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/{projectId}/graphs/{scanResultId}':
    get:
      tags:
        - Store
      summary: Download scan graph
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  '/api/store/{projectId}/logs/{scanResultId}':
    get:
      tags:
        - Store
      summary: Download scan logs
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  '/api/store/{projectId}/reports/{scanResultId}':
    get:
      tags:
        - Store
      summary: Download scan reports
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
  /api/auth/users/current:
    get:
      tags:
        - User
      summary: User from current jwt token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '401':
          description: Unauthorized
  /api/auth/users/search:
    get:
      tags:
        - User
      summary: Find users
      parameters:
        - name: searchValue
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/permissions':
    get:
      tags:
        - User
      summary: User`s global permissions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/checkPermissions':
    post:
      tags:
        - User
      summary: Check user permissions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CheckPermissionRequestModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPermissionRequestModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CheckPermissionRequestModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CheckPermissionRequestModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/permissions/projects':
    get:
      tags:
        - User
      summary: User`s permissions by UserId
      parameters:
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissionsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissionsModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/block':
    put:
      tags:
        - User
      summary: Block member. It just made user inactive but not deletes it from DB
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/unblock':
    put:
      tags:
        - User
      summary: Unblock member. Makes an user active again
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/versions/package/current:
    get:
      tags:
        - Version
      summary: Get current package version number
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
components:
  schemas:
    AccessTokenCreatedModel:
      type: object
      properties:
        token:
          type: string
          nullable: true
      additionalProperties: false
    AccessTokenCreateModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        expiresDateTime:
          type: string
          format: date-time
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AccessTokenScopeType'
          nullable: true
      additionalProperties: false
    AccessTokenModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        expiresDateTime:
          type: string
          format: date-time
          nullable: true
        createdDateTime:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AccessTokenScopeType'
          nullable: true
        creator:
          $ref: '#/components/schemas/UserModel'
      additionalProperties: false
    AccessTokenScopeType:
      enum:
        - None
        - ScanAgent
        - LightClientAndPlugins
      type: string
    ActionResult:
      type: object
      additionalProperties: false
    ActiveScanModel:
      type: object
      properties:
        scanResultId:
          type: string
          format: uuid
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        project:
          $ref: '#/components/schemas/ProjectModel'
      additionalProperties: false
    AnalysisRulesBaseModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesBaseModel'
        pmRules:
          $ref: '#/components/schemas/PmRulesBaseModel'
      additionalProperties: false
    AnalysisRulesModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesModel'
        pmRules:
          $ref: '#/components/schemas/PmRulesBaseModel'
      additionalProperties: false
    ApiErrorModel:
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/ApiErrorType'
        details:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
      additionalProperties: false
    ApiErrorType:
      enum:
        - None
        - USER_ID_IS_EMPTY
        - ACCESS_TOKEN_IS_INCORRECT
        - ACCESS_TOKEN_ID_IS_INCORRECT
        - ACCESS_TOKEN_WITH_SAME_NAME_ALREADY_EXISTS
        - USER_NOT_FOUND
        - INITIATOR_NOT_FOUND
        - CANNOT_ASSIGN_PROJECT_ROLE_WITH_ALL_PROJECTS
        - USER_ID_IS_INCORRECT
        - USER_UPSERT_FAILED
        - ROLE_NOT_FOUND
        - ROLE_IS_READONLY
        - ROLE_ALREADY_EXISTS
        - ROLE_UPSERT_FAILED
        - ROLE_UPDATE_FAILED
        - ROLE_DELETE_FAILED
        - DOMAIN_UPSERT_FAILED
        - DOMAIN_DELETE_FAILED
        - MEMBER_NOT_FOUND
        - EXT_AUTH_PROVIDERS_GET_ERROR
        - EXT_AUTH_PROVIDERS_AT_LEAST_ONE_EXISTS_LIMIT_ERROR
        - EXT_AUTH_PROVIDER_NOT_FOUND
        - EXT_AUTH_PROVIDER_GET_ERROR
        - EXT_AUTH_PROVIDER_UPDATE_ERROR
        - EXT_AUTH_PROVIDER_DELETE_ERROR
        - EXT_AUTH_PROVIDER_IS_INCORRECT
        - EXT_AUTH_PROVIDER_SCHEME_IS_INCORRECT
        - EXT_AUTH_PROVIDER_WITH_SAME_NAME_ALREADY_EXISTS
        - EXT_AUTH_SETTINGS_TEST_CONNECTION_FAILED
        - EXT_AUTH_PROVIDER_LDAP_WITH_SAME_SETTINGS_ALREADY_EXISTS
        - EXT_AUTH_SIGNIN_ERROR
        - EXT_AUTH_SIGNIN_CALLBACK_ERROR
        - EXT_AUTH_SIGNIN_PROVIDER_IS_EMPTY_OR_DISABLED
        - EXT_AUTH_SIGNIN_SCOPE_TYPE_IS_INCORRECT
        - EXT_AUTH_SIGNIN_PROVIDER_IS_NOT_AUTHENTICATED
        - EXT_AUTH_SIGNIN_INVALID_CREDENTIALS
        - EXT_AUTH_SIGNIN_SCHEME_IS_INCORRECT
        - EXT_AUTH_SIGNIN_OPENID_INVALID_CONFIGURATION
        - EXT_AUTH_SIGNIN_SAML2_RESPONSE_STATUS_ERROR
        - EXT_AUTH_SIGNIN_SAML2_INVALID_SIGNATURE
        - EXT_AUTH_SIGN_OUT_OPENID_ERROR
        - EXT_AUTH_SIGN_OUT_SAML2_ERROR
        - EXT_AUTH_SESSION_GET_ERROR
        - EXT_AUTH_USERS_EMPTY
        - EXT_AUTH_LDAP_SYNC_FAILED
        - EXT_LDAP_SYNC_ALREADY_STARTED
        - UPDATE_PACKAGE_VERSION_IS_ALREADY_UPLOADED
        - UPDATE_PACKAGE_UPLOADED_IS_ALREADY_STARTED
        - UPDATE_PACKAGE_UNKNOWN_PRODUCT
        - UPDATE_PACKAGE_VERSION_IS_NOT_UPLOADED
        - UPDATE_SERVER_PROCESS_RUN_TIMEOUT
        - UPDATE_SERVER_PARAMETERS_INVALID
        - UPDATE_SERVER_INSTALLER_EXIT_WITH_ERROR
        - UPDATE_SERVER_PACKAGE_IS_INCORRECT
        - UPDATE_SERVER_NOT_ENOUGH_SPACE
        - VERSION_MISMATCH
        - CERTIFICATE_FILE_IS_EMPTY
        - CERTIFICATE_IS_ALREADY_INSTALLED
        - CERTIFICATE_IS_NOT_VALID
        - URI_IS_NOT_VALID
        - PORT_IS_NOT_SPECIFIED
        - INCORRECT_DATE_VALUE
        - LOGS_NOT_FOUND
        - PROJECT_WITH_SAME_NAME_ALREADY_EXISTS
        - UNEXPECTED_SCAN_STAGE
        - PROJECT_NOT_FOUND
        - UPLOAD_NOT_FOUND
        - SCANRESULT_NOT_FOUND
        - INVALID_JSON_FIELDS
        - INVALID_BLACKBOX_SETTINGS
        - INVALID_LOCALE_ID
        - INCORRECT_SAST_RULES
        - INCORRECT_PM_RULE
        - UNEXPECTED_LANGUAGE
        - MAIL_PROFILE_NOT_FOUND
        - UPDATER_NOT_SET
        - ISSUE_NOT_FOUND
        - SCANSETTINGS_NOT_FOUND
        - INVALID_QUERY_PARAMETER
        - INVALID_PM_RULE
        - PM_RULE_NOT_FOUND
        - PM_RULE_VULN_TYPE_NOT_FOUND
        - PM_RULE_VULN_TYPE_IS_USED
        - SYSTEM_PM_RULE_VULN_TYPE_CANNOT_BE_DELETED
        - PM_RULE_EXPORT_NOT_FOUND
        - PM_RULE_EXPORT_EMPTY_LIST
        - PM_RULE_IMPORT_INVALID_FORMAT
        - PM_RULE_IMPORT_NO_FILES_SENT
        - PM_RULE_IMPORT_INVALID_IMPORT_SETTINGS
        - ENTITY_NOT_FOUND
        - ROW_NOT_FOUND
        - INVALID_PROJECT_TYPE
        - WRONG_PROJECT_ID
        - SCAN_TYPE_IS_NOT_FULL
        - ISSUE_TRACKER_CONNECTION_NOT_FOUND
        - ISSUE_TRACKER_CONNECTION_SETTINGS_NOT_SET
        - ISSUE_TRACKER_CONNECTION_FAILED
        - ISSUE_TRACKER_SETTINGS_ID_NOT_SET
        - ISSUE_TRACKER_CREDENTIALS_NOT_SET
        - ISSUE_TRACKER_HOST_IS_INCORRECT
        - ISSUE_TRACKER_OAUTH_DATA_NOT_SET
        - ISSUE_TRACKER_TRACKER_NOT_FOUND
        - ISSUE_TRACKER_TRACKER_NOT_FOUND_WITH_OAUTH
        - ISSUE_TRACKER_INVALID_TICKET_LINK
        - ISSUE_TRACKER_UNSUPPORTED_FIELDS_COFIGURATION
        - ISSUE_TRACKER_TICKET_CREATION_FAILED
        - ISSUE_TRACKER_PRIORITIES_GETTING_FAILED
        - ISSUE_TRACKER_USERS_GETTING_FAILED
        - ISSUE_TRACKER_STATUSES_GETTING_FAILED
        - ISSUE_TRACKER_FIELDS_GETTING_FAILED
        - ISSUE_TRACKER_OPTIONS_GETTING_FAILED
        - ISSUE_TRACKER_EXISTING_TICKETS_GETTING_FAILED
        - ISSUE_TRACKER_COMPONENTS_GETTING_FAILED
        - ISSUE_TRACKER_CAPTCHA_CHALLENGE
        - ISSUE_TRACKER_AUTHENTICATION_DENIED_DETAILED
        - ISSUE_TRACKER_AUTHENTICATION_DENIED
        - ISSUE_TRACKER_AUTHENTICATION_FAILED
        - ISSUE_TRACKER_OAUTH_SETTINGS_INVALID
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_ACCESS_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_ACCESS_TOKEN_RETURNED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_REQUEST_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_REQUEST_TOKEN_RETURNED
        - FS_SOURCE_IS_BUSY
        - DIRECTORY_NOT_FOUND
        - INVALID_ARCHIVE_DATA
        - ISSUE_ATTACH_TICKET_LINK_FAILED
        - COMMENT_POLICY_FAILED_COMMENT_IS_EMPTY
        - PROJECTS_COUNT_LIMITED_BY_LICENSE
        - LICENSE_FILE_IS_INVALID
        - LICENSE_EXPIRED
        - LICENSE_FINGERPRINT_ERROR
        - LICENSE_WITHOUT_FINGERPRINT
        - LANGUAGE_NOT_ALLOWED_BY_LICENCE
        - LICENSED_AGENTS_LIMIT_EXCEED
        - COULD_NOT_STORE_LICENSE
        - LICENSE_SERVICE_NOT_AVAILABLE
        - LICENSE_UNLICENSED_USAGE
        - LICENSE_VARIANT_NOT_SUPPORTED
        - NON_VCS_PROJECT
        - UNKNOWN_SOURCE_VERSION_CONTROL_SYSTEM
        - SOURCE_VERSION_CONTROL_SYSTEM_ERROR
        - INVALID_VERSION_CONTROL_SYSTEM_SETTINGS
        - OPERATION_NOT_EXISTS
        - SCAN_AGENT_NOT_FOUND
        - SCAN_ALREADY_SCHEDULED
        - INCORRECT_AGENT_STATUS
        - SCAN_AGENT_WAS_SUSPENDED
        - SCAN_AGENT_IS_SCANNING
        - SCAN_NOT_FOUND
        - ACTIVE_SCAN_AGENTS_NOT_FOUND
        - NO_ACTIVE_SCAN_AGENT_THAT_SUPPORTS_LANGUAGE
        - SCAN_AGENT_IS_ACTIVE
        - SCHEDULING_IS_LOCKED
        - SCAN_AGENT_NUMBER_EXCEED
        - NO_SCAN_MODULES
        - ONLY_BLACKBOX_IS_NOT_ALLOWED
        - INCORRECT_AGENT_OS_TAG
        - SCAN_IS_PROCESSING
        - SERVER_CERTIFICATE_NOT_FOUND
        - FILESYSTEM_ERROR_ACCESS_DENIED
        - VAULT_CREDENTIALS_NOT_FOUND
        - REPORT_TEMPLATE_NOT_FOUND
        - REPORT_GENERATE_FAILED
        - REPORT_TEMPLATE_INVALID
        - REPORT_TEMPLATE_UNKNOWN_FORMAT
        - REPORT_INCORRECT_PARAMETERS
        - REPORT_TEMPLATE_WITH_SAME_NAME_ALREADY_EXISTS
        - REPORT_TEMPLATE_FILE_NAME_INCORRECT_MACROS
        - REPORT_TEMPLATE_INVALID_FILE_NAME
        - INVALID_VERSION_CONTROL_SYSTEM_CONNECTION_SETTINGS
        - COULD_NOT_STORE_PROJECT
        - COULD_NOT_STORE_SCAN_SETTINGS
        - FILES_FOR_DOWNLOAD_NOT_FOUND
        - PROJECTS_FILES_NOT_FOUND
        - INVALID_UPLOAD_PATH
        - INVALID_PATH_PARAMETER
        - TOO_MANY_FILES
        - COULD_NOT_CHECKOUT_PROJECT
        - COULD_NOT_UPDATE_PROJECT_SOURCES_FROM_SOURCE_CONTROL
      type: string
    AuthProviderScheme:
      enum:
        - OpenIdConnect
        - Saml2
        - Ldap
      type: string
    AuthProviderSettingsBaseModel:
      type: object
      properties:
        ldap:
          $ref: '#/components/schemas/LdapSettingsModel'
        openId:
          $ref: '#/components/schemas/OpenIdSettingsModel'
        saml2:
          $ref: '#/components/schemas/Saml2SettingsModel'
        userMappings:
          type: array
          items:
            $ref: '#/components/schemas/UserMappingModel'
          nullable: true
        roleMappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMappingModel'
          nullable: true
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
      additionalProperties: false
    AuthProviderSettingsModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        ldap:
          $ref: '#/components/schemas/LdapSettingsModel'
        openId:
          $ref: '#/components/schemas/OpenIdSettingsModel'
        saml2:
          $ref: '#/components/schemas/Saml2SettingsModel'
        userMappings:
          type: array
          items:
            $ref: '#/components/schemas/UserMappingModel'
          nullable: true
        roleMappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMappingModel'
          nullable: true
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
      additionalProperties: false
    AuthResultModel:
      type: object
      properties:
        accessToken:
          type: string
          nullable: true
        refreshToken:
          type: string
          nullable: true
        expiredAt:
          type: string
          format: date-time
      additionalProperties: false
    AuthScope:
      enum:
        - None
        - Internal
        - Web
        - WebRefresh
        - WebLongRefresh
        - AccessToken
        - AccessTokenRefresh
        - Plugin
        - PluginRefresh
      type: string
    AuthType:
      enum:
        - Form
        - Http
        - None
        - RawCookie
      type: string
    BaseTicketLinkModel:
      type: object
      properties:
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        connectionId:
          type: string
          format: uuid
          readOnly: true
        ticketId:
          type: string
          nullable: true
      additionalProperties: false
    BasicCredentialsModel:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxAddressModel:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/BlackBoxFormat'
        address:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxAuthenticationFullModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AuthType'
        form:
          $ref: '#/components/schemas/BlackBoxFormAuthenticationModel'
        http:
          $ref: '#/components/schemas/BlackBoxHttpAuthenticationModel'
        cookie:
          $ref: '#/components/schemas/BlackBoxRawCookieAuthenticationModel'
      additionalProperties: false
    BlackBoxFormat:
      enum:
        - Wildcard
        - ExactMatch
        - RegExp
      type: string
    BlackBoxFormAuthenticationModel:
      type: object
      properties:
        formDetection:
          $ref: '#/components/schemas/BlackBoxFormDetection'
        loginKey:
          type: string
          nullable: true
        passwordKey:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        formAddress:
          type: string
          nullable: true
        formXPath:
          type: string
          nullable: true
        validationTemplate:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxFormDetection:
      enum:
        - Auto
        - Manual
      type: string
    BlackBoxHttpAuthenticationModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        validationAddress:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxProxySettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        type:
          $ref: '#/components/schemas/ProxyType'
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxRawCookieAuthenticationModel:
      type: object
      properties:
        validationAddress:
          type: string
          nullable: true
        validationTemplate:
          type: string
          nullable: true
        cookie:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxScanLevel:
      enum:
        - None
        - Fast
        - Normal
        - Full
      type: string
    BlackBoxSettingsBaseModel:
      type: object
      properties:
        site:
          type: string
          nullable: true
        sslCheck:
          type: boolean
        level:
          $ref: '#/components/schemas/BlackBoxScanLevel'
        scanScope:
          $ref: '#/components/schemas/ScanScope'
        blackListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        whiteListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        additionalHttpHeaders:
          type: array
          items:
            $ref: '#/components/schemas/HttpHeaderModel'
          nullable: true
        authentication:
          $ref: '#/components/schemas/BlackBoxAuthenticationFullModel'
        proxySettings:
          $ref: '#/components/schemas/BlackBoxProxySettingsModel'
        runAutocheckAfterScan:
          type: boolean
      additionalProperties: false
    BlackBoxSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        site:
          type: string
          nullable: true
        sslCheck:
          type: boolean
        level:
          $ref: '#/components/schemas/BlackBoxScanLevel'
        scanScope:
          $ref: '#/components/schemas/ScanScope'
        blackListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        whiteListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        additionalHttpHeaders:
          type: array
          items:
            $ref: '#/components/schemas/HttpHeaderModel'
          nullable: true
        authentication:
          $ref: '#/components/schemas/BlackBoxAuthenticationFullModel'
        proxySettings:
          $ref: '#/components/schemas/BlackBoxProxySettingsModel'
        runAutocheckAfterScan:
          type: boolean
      additionalProperties: false
    BlackboxVulnerabilytyModel:
      type: object
      properties:
        title:
          type: string
          nullable: true
        scannedUrl:
          type: string
          nullable: true
        items:
          type: object
          additionalProperties:
            type: string
          nullable: true
        request:
          $ref: '#/components/schemas/IssueExploitDataModel'
        response:
          $ref: '#/components/schemas/IssueExploitDataModel'
      additionalProperties: false
    BriefProjectInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    CertificateInfoModel:
      type: object
      properties:
        thumbprint:
          type: string
          nullable: true
        friendlyName:
          type: string
          nullable: true
        subjectName:
          type: string
          nullable: true
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        daysBeforeExpiry:
          type: integer
          format: int32
          nullable: true
        issuer:
          type: string
          nullable: true
      additionalProperties: false
    CertModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: false
    ChangeHistoryDetailModel:
      type: object
      properties:
        oldValue:
          type: string
          nullable: true
        newValue:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueApprovalStateModel:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/IssueApprovalState'
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueIsFavoriteModel:
      type: object
      properties:
        isFavorite:
          type: boolean
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssuesApprovalStateModel:
      type: object
      properties:
        issuesStates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueApprovalState'
          nullable: true
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssuesFavoriteModel:
      type: object
      properties:
        issues:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        isFavorite:
          type: boolean
      additionalProperties: false
    ChangeObjectType:
      enum:
        - None
        - IssueApprovalState
        - Comment
        - Ticket
        - Exploit
        - Favorite
        - ScanQueueItem
      type: string
    CheckPermissionRequestModel:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
        projectId:
          type: string
          format: uuid
          nullable: true
        permissionCheckStrategy:
          $ref: '#/components/schemas/PermissionCheckStrategy'
      additionalProperties: false
    CodeChunkModel:
      type: object
      properties:
        file:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        beginLine:
          type: integer
          format: int32
        endLine:
          type: integer
          format: int32
        beginColumn:
          type: integer
          format: int32
        endColumn:
          type: integer
          format: int32
      additionalProperties: false
    ComponentVersionModel:
      type: object
      properties:
        type:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    ConnectionModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        host:
          type: string
          nullable: true
        trackerType:
          $ref: '#/components/schemas/TrackerType'
      additionalProperties: false
    ConnectionSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        host:
          type: string
          nullable: true
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        credentials:
          $ref: '#/components/schemas/CredentialsModel'
      additionalProperties: false
    CreateProjectSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        projectUrl:
          type: string
          nullable: true
        whiteBox:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        blackBoxEnabled:
          type: boolean
        blackBox:
          $ref: '#/components/schemas/BlackBoxSettingsBaseModel'
      additionalProperties: false
    CredentialsModel:
      type: object
      properties:
        authType:
          $ref: '#/components/schemas/IssueTrackerAuthType'
        basic:
          $ref: '#/components/schemas/BasicCredentialsModel'
        oAuth:
          $ref: '#/components/schemas/OAuthCredentialsModel'
      additionalProperties: false
    CvssModel:
      type: object
      properties:
        baseVector:
          type: string
          nullable: true
        baseScore:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        severity:
          $ref: '#/components/schemas/IssueLevel'
      additionalProperties: false
    DataFormat:
      enum:
        - Regex
        - Dsl
      type: string
    DefaultProjectSettingsModel:
      type: object
      properties:
        langPercentDistribution:
          type: object
          properties:
            None:
              type: number
              format: double
            Java:
              type: number
              format: double
            CSharpWinOnly:
              type: number
              format: double
            VB:
              type: number
              format: double
            Php:
              type: number
              format: double
            JavaScript:
              type: number
              format: double
            Python:
              type: number
              format: double
            ObjectiveC:
              type: number
              format: double
            Swift:
              type: number
              format: double
            CAndCPlusPlus:
              type: number
              format: double
            Go:
              type: number
              format: double
            Kotlin:
              type: number
              format: double
            Sql:
              type: number
              format: double
            Ruby:
              type: number
              format: double
            CSharp:
              type: number
              format: double
            Solidity:
              type: number
              format: double
          additionalProperties: false
          nullable: true
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        javaScriptSettings:
          $ref: '#/components/schemas/JavaScriptSettingsModel'
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        phpSettings:
          $ref: '#/components/schemas/PhpSettingsModel'
        pmTaintSettings:
          $ref: '#/components/schemas/PmTaintBaseSettingsModel'
        pythonSettings:
          $ref: '#/components/schemas/PythonSettingsModel'
        rubySettings:
          $ref: '#/components/schemas/RubySettingsModel'
        jsaDotNetSettings:
          $ref: '#/components/schemas/JsaDotNetSettingsModel'
        goSettings:
          $ref: '#/components/schemas/GoSettingsModel'
        pygrepSettings:
          $ref: '#/components/schemas/PygrepSettingsModel'
        scaSettings:
          $ref: '#/components/schemas/ScaSettingsModel'
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        projectUrl:
          type: string
          nullable: true
        whiteBox:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        blackBoxEnabled:
          type: boolean
        blackBox:
          $ref: '#/components/schemas/BlackBoxSettingsBaseModel'
      additionalProperties: false
    DirectoryContent:
      type: object
      properties:
        _directories:
          type: array
          items:
            $ref: '#/components/schemas/DirectoryContent'
        _files:
          type: array
          items:
            type: string
        _hasContent:
          type: boolean
        name:
          type: string
          nullable: true
      additionalProperties: false
    DotNetProjectType:
      enum:
        - None
        - Solution
        - WebSite
      type: string
    DotNetSettingsModel:
      type: object
      properties:
        projectType:
          $ref: '#/components/schemas/DotNetProjectType'
        solutionFile:
          type: string
          nullable: true
        webSiteFolder:
          type: string
          nullable: true
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
      additionalProperties: false
    ElasticSearchLogFormat:
      enum:
        - Plain
        - Json
      type: string
    ElasticSearchTargetModel:
      type: object
      properties:
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        isEnabled:
          type: boolean
        logFormat:
          $ref: '#/components/schemas/ElasticSearchLogFormat'
        logLevel:
          $ref: '#/components/schemas/LogLevel'
      additionalProperties: false
    EnterpriseLicenseModel:
      type: object
      properties:
        licenseNumber:
          type: integer
          format: int32
        client:
          type: string
          nullable: true
        currentDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        limitProjects:
          type: integer
          format: int32
        maxAgents:
          type: integer
          format: int32
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
          nullable: true
        isValid:
          type: boolean
        perpetual:
          type: boolean
      additionalProperties: false
    ErrorBaseModel:
      type: object
      additionalProperties: false
    ErrorLevel:
      enum:
        - Error
        - Warn
        - Info
        - Debug
        - Trace
      type: string
    ExtendedIssueTrackerIntegrationSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        id:
          type: string
          format: uuid
          nullable: true
        connection:
          $ref: '#/components/schemas/ConnectionModel'
        project:
          $ref: '#/components/schemas/ProjectInfoModel'
        ticketType:
          $ref: '#/components/schemas/TicketTypeModel'
        summary:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        labels:
          type: array
          items:
            type: string
          nullable: true
        assignee:
          $ref: '#/components/schemas/UserTrackerModel'
        reporter:
          $ref: '#/components/schemas/UserTrackerModel'
      additionalProperties: false
    ExtendedProjectSettingsModel:
      type: object
      properties:
        isTemp:
          type: boolean
        hasSources:
          type: boolean
        commonSettings:
          $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
        blackBoxSettings:
          $ref: '#/components/schemas/BlackBoxSettingsModel'
      additionalProperties: false
    ExtendedScanStatisticModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        date:
          type: string
          format: date-time
          nullable: true
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        threatLevel:
          $ref: '#/components/schemas/ThreatLevel'
        hasErrors:
          type: boolean
        queueDate:
          type: string
          format: date-time
          nullable: true
        initiator:
          $ref: '#/components/schemas/InitiatorInfoModel'
        high:
          type: integer
          format: int32
        medium:
          type: integer
          format: int32
        low:
          type: integer
          format: int32
        potential:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        filesTotal:
          type: integer
          format: int32
        filesScanned:
          type: integer
          format: int32
        urlsScanned:
          type: integer
          format: int32
        urlsTotal:
          type: integer
          format: int32
        scanDuration:
          type: string
          format: date-span
        policyState:
          $ref: '#/components/schemas/PolicyState'
      additionalProperties: false
    ExternalLoggingSettingsModel:
      type: object
      properties:
        syslog:
          $ref: '#/components/schemas/SyslogTargetModel'
        elasticSearch:
          $ref: '#/components/schemas/ElasticSearchTargetModel'
      additionalProperties: false
    FieldInfoModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          $ref: '#/components/schemas/FieldName'
        friendlyName:
          type: string
          nullable: true
        value:
          type: array
          items:
            type: string
          nullable: true
        type:
          $ref: '#/components/schemas/FieldType'
        isArray:
          type: boolean
        isRequired:
          type: boolean
        isCustom:
          type: boolean
      additionalProperties: false
    FieldName:
      type: object
      additionalProperties: false
    FieldType:
      enum:
        - Unknown
        - Date
        - DateTime
        - Number
        - Text
        - TextArea
        - Url
        - CheckBox
        - ListBox
        - RadioButtons
        - ComboBox
        - ComboBoxGroup
        - Attachment
        - Tags
        - User
        - Project
        - TicketType
        - Priority
        - Version
      type: string
    FileFolderExclusionsModel:
      type: object
      properties:
        exclusions:
          type: string
          nullable: true
      additionalProperties: false
    FileStorageSettingsModel:
      type: object
      properties:
        maxProjectScanLogsFiles:
          type: integer
          format: int32
        minutesStoringDraftProject:
          type: integer
          format: int32
        minutesStoringDisposableNotScannedProject:
          type: integer
          format: int32
        daysStoringDisposableScannedProject:
          type: integer
          format: int32
      additionalProperties: false
    FullScanReason:
      enum:
        - None
        - UserRequirement
        - NoPreviousScan
        - LegacyPreviousScan
        - PreviousScanIsNotInDoneStatus
        - PreviousScanWithoutStaticAnalyzers
        - ScanEnvironmentIsNotTheSame
        - PreviousScanWithCriticalErrors
        - PreviousScanWithIncrementBlockingErrors
        - IncompatibleScanSettings
        - HasNewFiles
        - IgnoredFilesListHasChanged
        - SyncedFromPlugins
      type: string
    GoSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
      additionalProperties: false
    HealthCheckServiceResult:
      type: object
      properties:
        service:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/HealthStatus'
        responseTime:
          type: number
          format: double
      additionalProperties: false
    HealthCheckSummaryResult:
      type: object
      properties:
        totalResponseTime:
          type: number
          format: double
        services:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheckServiceResult'
          nullable: true
      additionalProperties: false
    HealthStatus:
      enum:
        - Unhealthy
        - Degraded
        - Healthy
      type: string
    HttpHeaderModel:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    InitiatorInfoModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InitiatorType'
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    InitiatorModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InitiatorType'
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        relatedEntityId:
          type: string
          format: uuid
      additionalProperties: false
    InitiatorType:
      enum:
        - User
        - AccessToken
        - System
      type: string
    IssueApprovalState:
      enum:
        - None
        - Approval
        - Discard
        - NotExist
        - AutoApproval
      type: string
    IssueComponentMetadataModel:
      type: object
      properties:
        componentName:
          type: string
          nullable: true
        cveId:
          type: string
          nullable: true
        cvss2:
          $ref: '#/components/schemas/CvssModel'
        cvss3:
          $ref: '#/components/schemas/CvssModel'
      additionalProperties: false
    IssueDescriptionModel:
      type: object
      properties:
        identity:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        header:
          type: string
          nullable: true
        descriptionText:
          type: string
          nullable: true
        descriptionHtml:
          type: string
          nullable: true
        descriptionMarkdown:
          type: string
          nullable: true
      additionalProperties: false
    IssueExploitDataModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IssueExploitDataType'
        text:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        parameters:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
      additionalProperties: false
    IssueExploitDataType:
      enum:
        - None
        - Http
        - Script
        - Interaction
      type: string
    IssueLevel:
      enum:
        - None
        - Potential
        - Low
        - Medium
        - High
      type: string
    IssueMetadataModel:
      type: object
      properties:
        identity:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        level:
          $ref: '#/components/schemas/IssueLevel'
        cweId:
          type: string
          nullable: true
        owaspId:
          type: string
          nullable: true
        pciId:
          type: string
          nullable: true
        nist:
          type: string
          nullable: true
        component:
          $ref: '#/components/schemas/IssueComponentMetadataModel'
      additionalProperties: false
    IssueResourcesModel:
      type: object
      properties:
        descriptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueDescriptionModel'
          nullable: true
        metadatas:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueMetadataModel'
          nullable: true
      additionalProperties: false
    IssueTrackerAuthType:
      enum:
        - Unknown
        - Basic
        - OAuth1A
      type: string
    IssueTrackerIntegrationSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        id:
          type: string
          format: uuid
          nullable: true
        connectionId:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
        ticketTypeId:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        labels:
          type: array
          items:
            type: string
          nullable: true
        assigneeName:
          type: string
          nullable: true
        reporterName:
          type: string
          nullable: true
      additionalProperties: false
    IssueType:
      enum:
        - Unknown
        - Vulnerability
        - Weakness
        - Configuration
        - Fingerprint
        - BlackBox
        - YaraMatch
        - Pygrep
        - Sca
        - FingerprintSca
        - Slither
      type: string
    JavaScriptSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
        useTaintAnalysis:
          type: boolean
        useJsaAnalysis:
          type: boolean
      additionalProperties: false
    JavaSettingsModel:
      type: object
      properties:
        parameters:
          type: string
          nullable: true
        unpackUserPackages:
          type: boolean
        userPackagePrefixes:
          type: string
          nullable: true
        version:
          $ref: '#/components/schemas/JavaVersions'
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
        dependenciesPath:
          type: string
          nullable: true
      additionalProperties: false
    JavaVersions:
      enum:
        - v1_8
        - v1_11
        - v1_17
      type: string
    JiraTicketLinkModel:
      type: object
      properties:
        projectId:
          type: string
          nullable: true
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        connectionId:
          type: string
          format: uuid
          readOnly: true
        ticketId:
          type: string
          nullable: true
      additionalProperties: false
    JsaDotNetSettingsModel:
      type: object
      properties:
        projectType:
          $ref: '#/components/schemas/DotNetProjectType'
        solutionFile:
          type: string
          nullable: true
        webSiteFolder:
          type: string
          nullable: true
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
      additionalProperties: false
    LdapSettingsModel:
      type: object
      properties:
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        sslPort:
          type: integer
          format: int32
        useSsl:
          type: boolean
        caCertificate:
          $ref: '#/components/schemas/CertModel'
        useCryptographicAuthentication:
          type: boolean
        authCertificate:
          $ref: '#/components/schemas/CertModel'
        privateKey:
          $ref: '#/components/schemas/CertModel'
        baseDn:
          type: string
          nullable: true
        rootUserDn:
          type: string
          nullable: true
        rootUserPassword:
          type: string
          nullable: true
        searchFilter:
          type: string
          nullable: true
        syncUsersInterval:
          type: string
          format: date-span
      additionalProperties: false
    LdapSyncStatus:
      enum:
        - Inactive
        - Running
      type: string
    LegacyProgrammingLanguageGroup:
      enum:
        - None
        - Java
        - CSharpWinOnly
        - VB
        - Php
        - JavaScript
        - Python
        - ObjectiveC
        - Swift
        - CAndCPlusPlus
        - Go
        - Kotlin
        - Sql
        - Ruby
        - CSharp
        - Solidity
      type: string
    LightMailProfileModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        profileName:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
      additionalProperties: false
    LogLevel:
      enum:
        - Undefined
        - Trace
        - Debug
        - Info
        - Warn
        - Error
        - Fatal
      type: string
    LogLevelModel:
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/LogLevel'
      additionalProperties: false
    LogSettingsModel:
      type: object
      properties:
        fileLoggingLevel:
          $ref: '#/components/schemas/LogLevel'
        externalLoggingSettings:
          $ref: '#/components/schemas/ExternalLoggingSettingsModel'
      additionalProperties: false
    MailAuthentication:
      type: object
      properties:
        isAuthRequired:
          type: boolean
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailAuthenticationPatchModel:
      type: object
      properties:
        isAuthRequired:
          type: boolean
          nullable: true
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailingProjectSettingsModel:
      type: object
      properties:
        enabled:
          type: boolean
        mailProfileId:
          type: string
          format: uuid
          nullable: true
        emailRecipients:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    MailProfileModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthentication'
        id:
          type: string
          format: uuid
        credentialsId:
          type: string
          format: uuid
          nullable: true
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
        considerCertificateErrors:
          type: boolean
      additionalProperties: false
    MailProfilePatchModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatchModel'
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
          nullable: true
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
      additionalProperties: false
    MemberModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        authentication:
          type: string
          nullable: true
        isActive:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/MemberRoleModel'
          nullable: true
      additionalProperties: false
    MemberRoleModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        projects:
          type: array
          items:
            $ref: '#/components/schemas/RoleProjectModel'
          nullable: true
        autoSet:
          type: boolean
        allProjects:
          type: boolean
      additionalProperties: false
    MetaVarModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        beginLine:
          type: integer
          format: int32
        endLine:
          type: integer
          format: int32
        beginColumn:
          type: integer
          format: int32
        endColumn:
          type: integer
          format: int32
      additionalProperties: false
    Oauth1AccessTokenModel:
      type: object
      properties:
        token:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
      additionalProperties: false
    Oauth1DataModel:
      type: object
      properties:
        privateKey:
          type: string
          nullable: true
        publicKey:
          type: string
          nullable: true
        consumerKey:
          type: string
          nullable: true
      additionalProperties: false
    Oauth1RequestTokenModel:
      type: object
      properties:
        token:
          type: string
          nullable: true
        grantUrl:
          type: string
          nullable: true
      additionalProperties: false
    OAuthCredentialsModel:
      type: object
      properties:
        authData:
          $ref: '#/components/schemas/Oauth1DataModel'
        token:
          type: string
          nullable: true
        tokenSecret:
          type: string
          nullable: true
      additionalProperties: false
    OpenIdResponseMode:
      enum:
        - Query
        - FormPost
        - Fragment
      type: string
    OpenIdResponseType:
      enum:
        - Code
        - CodeIdToken
        - CodeIdTokenToken
        - CodeToken
        - IdToken
        - IdTokenToken
        - None
        - Token
      type: string
    OpenIdSettingsModel:
      type: object
      properties:
        authority:
          type: string
          nullable: true
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
        caCertificate:
          $ref: '#/components/schemas/CertModel'
        responseMode:
          $ref: '#/components/schemas/OpenIdResponseMode'
        responseType:
          $ref: '#/components/schemas/OpenIdResponseType'
      additionalProperties: false
    OptionValueModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    PermissionCheckStrategy:
      enum:
        - Any
        - All
      type: string
    PermissionType:
      enum:
        - None
        - CreateProject
        - ManageIssueTrackerIntegration
        - ReadIssueTrackerIntegration
        - ManageLicense
        - ReadLicense
        - ManageScanQueue
        - ReadScanQueue
        - ManageScanAgents
        - ReadScanAgents
        - ManageCustomRules
        - ReadCustomRules
        - ManageAccessTokens
        - ReadAccessTokens
        - ReadSSLCert
        - LoadLogs
        - ReadLogSettings
        - ManageLogSettings
        - ManageSystemProxySettings
        - ReadSystemProxySettings
        - ManageMailProfileSettings
        - ReadMailProfileSettings
        - ManageReportSettings
        - ReadReportSettings
        - ManageSSOSettings
        - ReadSSOSettings
        - ManageUsers
        - ReadUsers
        - ManageRoles
        - ReadRoles
        - CreateDisposableProject
        - ViewProject
        - ChangeVulnStatus
        - DeleteScanResult
        - UpdateProject
        - ManageScan
        - DeleteProject
        - ManageProjectMembership
        - DeleteIssueTrackerTicket
        - CreateIssueTrackerTicket
        - WorkWithScanScheduler
      type: string
    PhpSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
      additionalProperties: false
    PmRuleCreateUpdateModel:
      type: object
      properties:
        vulnerabilityTypeId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        programmingLanguages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguages'
          nullable: true
        dataFormat:
          $ref: '#/components/schemas/DataFormat'
        filenameWildcard:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        contactInfo:
          type: string
          nullable: true
      additionalProperties: false
    PmRuleModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        version:
          type: integer
          format: int32
        modifiedDate:
          type: string
          format: date-time
        modifiedBy:
          $ref: '#/components/schemas/UserModel'
        vulnerabilityType:
          $ref: '#/components/schemas/PmRuleVulnTypeModel'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        programmingLanguages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguages'
          nullable: true
        dataFormat:
          $ref: '#/components/schemas/DataFormat'
        filenameWildcard:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        contactInfo:
          type: string
          nullable: true
      additionalProperties: false
    PmRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    PmRuleVulnCreationType:
      enum:
        - User
        - System
      type: string
    PmRuleVulnTypeCreatingModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PmRuleVulnTypeModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        creationType:
          $ref: '#/components/schemas/PmRuleVulnCreationType'
      additionalProperties: false
    PmTaintBaseSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
      additionalProperties: false
    PmTaintSettingsModel:
      type: object
      properties:
        useCustomPmRules:
          type: boolean
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
      additionalProperties: false
    PolicyState:
      enum:
        - None
        - Rejected
        - Confirmed
      type: string
    PriorityTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    ProgrammingLanguageGroup:
      enum:
        - None
        - Java
        - CSharp
        - VB
        - Php
        - JavaScript
        - Python
        - ObjectiveC
        - Swift
        - CAndCPlusPlus
        - Go
        - Kotlin
        - Sql
        - Ruby
        - Solidity
      type: string
    ProgrammingLanguages:
      enum:
        - None
        - DotNet
        - Php
        - Java
        - Html
        - JavaScript
        - SandBox
        - Binary
        - PlSql
        - TSql
        - Aspx
        - C
        - CPlusPlus
        - ObjectiveC
        - Swift
        - MySql
        - Python
        - CSharp
        - VB
        - Go
        - Kotlin
        - TypeScript
        - Ruby
        - JsaNet
        - Solidity
      type: string
    ProjectChangeHistoryRowModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        initiator:
          $ref: '#/components/schemas/InitiatorModel'
        projectId:
          type: string
          format: uuid
        changeObjectType:
          $ref: '#/components/schemas/ChangeObjectType'
        changedDateTime:
          type: string
          format: date-time
        relatedEntityId:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChangeHistoryDetailModel'
          nullable: true
      additionalProperties: false
    ProjectInfoModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      additionalProperties: false
    ProjectLocalFilesSourceModel:
      type: object
      properties:
        scanTargetName:
          type: string
          nullable: true
      additionalProperties: false
    ProjectMemberModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        authentication:
          type: string
          nullable: true
        isActive:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberRoleModel'
          nullable: true
      additionalProperties: false
    ProjectMemberRoleModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        autoSet:
          type: boolean
        allProjects:
          type: boolean
      additionalProperties: false
    ProjectModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        settingsId:
          type: string
          format: uuid
        creationDate:
          type: string
          format: date-time
        projectType:
          $ref: '#/components/schemas/ProjectType'
      additionalProperties: false
    ProjectPermissionsModel:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
      additionalProperties: false
    ProjectSettingsModel:
      type: object
      properties:
        sourceUpdateInfo:
          $ref: '#/components/schemas/ProjectSourceUpdateInfoModel'
        langPercentDistribution:
          type: object
          properties:
            None:
              type: number
              format: double
            Java:
              type: number
              format: double
            CSharpWinOnly:
              type: number
              format: double
            VB:
              type: number
              format: double
            Php:
              type: number
              format: double
            JavaScript:
              type: number
              format: double
            Python:
              type: number
              format: double
            ObjectiveC:
              type: number
              format: double
            Swift:
              type: number
              format: double
            CAndCPlusPlus:
              type: number
              format: double
            Go:
              type: number
              format: double
            Kotlin:
              type: number
              format: double
            Sql:
              type: number
              format: double
            Ruby:
              type: number
              format: double
            CSharp:
              type: number
              format: double
            Solidity:
              type: number
              format: double
          additionalProperties: false
          nullable: true
        projectName:
          type: string
          nullable: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        whiteBoxSettings:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        goSettings:
          $ref: '#/components/schemas/GoSettingsModel'
        javaScriptSettings:
          $ref: '#/components/schemas/JavaScriptSettingsModel'
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        jsaDotNetSettings:
          $ref: '#/components/schemas/JsaDotNetSettingsModel'
        phpSettings:
          $ref: '#/components/schemas/PhpSettingsModel'
        pmTaintSettings:
          $ref: '#/components/schemas/PmTaintBaseSettingsModel'
        pythonSettings:
          $ref: '#/components/schemas/PythonSettingsModel'
        rubySettings:
          $ref: '#/components/schemas/RubySettingsModel'
        pygrepSettings:
          $ref: '#/components/schemas/PygrepSettingsModel'
        scaSettings:
          $ref: '#/components/schemas/ScaSettingsModel'
        reportAfterScan:
          $ref: '#/components/schemas/MailingProjectSettingsModel'
        skipGitIgnoreFiles:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/SourceType'
        localFilesSource:
          $ref: '#/components/schemas/ProjectLocalFilesSourceModel'
        versionControlSource:
          $ref: '#/components/schemas/ProjectVersionControlSourceModel'
        hideSourcesPathAndUserName:
          type: boolean
      additionalProperties: false
    ProjectSettingsUpdatedModel:
      type: object
      properties:
        projectName:
          type: string
          nullable: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        whiteBoxSettings:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        goSettings:
          $ref: '#/components/schemas/GoSettingsModel'
        javaScriptSettings:
          $ref: '#/components/schemas/JavaScriptSettingsModel'
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        jsaDotNetSettings:
          $ref: '#/components/schemas/JsaDotNetSettingsModel'
        phpSettings:
          $ref: '#/components/schemas/PhpSettingsModel'
        pmTaintSettings:
          $ref: '#/components/schemas/PmTaintBaseSettingsModel'
        pythonSettings:
          $ref: '#/components/schemas/PythonSettingsModel'
        rubySettings:
          $ref: '#/components/schemas/RubySettingsModel'
        pygrepSettings:
          $ref: '#/components/schemas/PygrepSettingsModel'
        scaSettings:
          $ref: '#/components/schemas/ScaSettingsModel'
        reportAfterScan:
          $ref: '#/components/schemas/MailingProjectSettingsModel'
        skipGitIgnoreFiles:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/SourceType'
        localFilesSource:
          $ref: '#/components/schemas/ProjectLocalFilesSourceModel'
        versionControlSource:
          $ref: '#/components/schemas/ProjectVersionControlSourceModel'
        hideSourcesPathAndUserName:
          type: boolean
      additionalProperties: false
    ProjectSourceUpdateInfoModel:
      type: object
      properties:
        lastDateTimeUpdate:
          type: string
          format: date-time
        updaterInfo:
          $ref: '#/components/schemas/UpdaterInfoModel'
      additionalProperties: false
    ProjectType:
      enum:
        - Permanent
        - Disposable
        - Draft
      type: string
    ProjectVersionControlSourceModel:
      type: object
      properties:
        scanTargetPath:
          type: string
          nullable: true
        branchName:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        sshKey:
          type: string
          nullable: true
        includeSubmodules:
          type: boolean
        sourceControlCredentialsType:
          $ref: '#/components/schemas/SourceControlCredentialsType'
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
        projectCollection:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        authenticationToken:
          type: string
          nullable: true
        credentialsId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    ProjectWithScanInfoModel:
      type: object
      properties:
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        langPercentDistribution:
          type: object
          properties:
            None:
              type: number
              format: double
            Java:
              type: number
              format: double
            CSharpWinOnly:
              type: number
              format: double
            VB:
              type: number
              format: double
            Php:
              type: number
              format: double
            JavaScript:
              type: number
              format: double
            Python:
              type: number
              format: double
            ObjectiveC:
              type: number
              format: double
            Swift:
              type: number
              format: double
            CAndCPlusPlus:
              type: number
              format: double
            Go:
              type: number
              format: double
            Kotlin:
              type: number
              format: double
            Sql:
              type: number
              format: double
            Ruby:
              type: number
              format: double
            CSharp:
              type: number
              format: double
            Solidity:
              type: number
              format: double
          additionalProperties: false
          nullable: true
        isPinned:
          type: boolean
        scanStartErrors:
          $ref: '#/components/schemas/ScanStartErrorType'
        scanAppType:
          $ref: '#/components/schemas/ScanAppType'
        lastScan:
          $ref: '#/components/schemas/ExtendedScanStatisticModel'
        prevScan:
          $ref: '#/components/schemas/ExtendedScanStatisticModel'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        settingsId:
          type: string
          format: uuid
        creationDate:
          type: string
          format: date-time
        projectType:
          $ref: '#/components/schemas/ProjectType'
      additionalProperties: false
    ProxySettingsModel:
      type: object
      properties:
        url:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        credentialsId:
          type: string
          format: uuid
          nullable: true
        enabled:
          type: boolean
      additionalProperties: false
    ProxyType:
      enum:
        - Http
        - HttpNoConnect
        - Socks4
        - Socks5
      type: string
    PtOsvModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        sources:
          type: array
          items:
            type: string
          nullable: true
        cwes:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        cvssItems:
          type: array
          items:
            $ref: '#/components/schemas/CvssModel'
          nullable: true
        descriptionMarkdown:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
      additionalProperties: false
    PygrepSettingsModel:
      type: object
      properties:
        rulesDirPath:
          type: string
          nullable: true
        launchParameters:
          type: string
          nullable: true
      additionalProperties: false
    PygrepVulnerabilityModel:
      type: object
      properties:
        targetRule:
          type: string
          nullable: true
        metaVars:
          type: array
          items:
            $ref: '#/components/schemas/MetaVarModel'
          nullable: true
        recommendation:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PythonSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
        dependenciesPath:
          type: string
          nullable: true
      additionalProperties: false
    RefreshTokenResultModel:
      type: object
      properties:
        accessToken:
          type: string
          nullable: true
        expiredAt:
          type: string
          format: date-time
      additionalProperties: false
    ReportGenerateModel:
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/UserReportParametersModel'
        sessionId:
          type: string
          format: uuid
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
        localeId:
          type: string
          nullable: true
        filters:
          $ref: '#/components/schemas/UserReportFiltersModel'
      additionalProperties: false
    ReportTemplateModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        isReadOnly:
          type: boolean
        isFavorite:
          type: boolean
        type:
          $ref: '#/components/schemas/ReportType'
        outputFileName:
          type: string
          nullable: true
        creator:
          $ref: '#/components/schemas/UserModel'
        creationDate:
          type: string
          format: date-time
      additionalProperties: false
    ReportTemplateUpsertModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        outputFileName:
          type: string
          nullable: true
      additionalProperties: false
    ReportType:
      enum:
        - Custom
        - PlainReport
        - AutoCheck
        - Nist
        - Oud4
        - Owasp
        - Owaspm
        - Pcidss
        - Sans
        - Json
        - Xml
        - Md
        - Sarif
        - Gitlab
      type: string
    RepositoryType:
      enum:
        - None
        - Git
        - TFS
      type: string
    RoleMappingModel:
      type: object
      properties:
        field:
          type: string
          nullable: true
        values:
          type: array
          items:
            type: string
          nullable: true
        role:
          $ref: '#/components/schemas/MemberRoleModel'
      additionalProperties: false
    RoleModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
        createdDateTime:
          type: string
          format: date-time
        isSystem:
          type: boolean
      additionalProperties: false
    RoleProjectModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
      additionalProperties: false
    RoleUpsertModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
      additionalProperties: false
    RubySettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
      additionalProperties: false
    Saml2NameIdPolicy:
      enum:
        - Unspecified
        - Persistent
        - Transient
        - Email
      type: string
    Saml2SettingsModel:
      type: object
      properties:
        issuer:
          type: string
          nullable: true
        allowedIssuer:
          type: string
          nullable: true
        singleSignOnDestination:
          type: string
          nullable: true
        signatureAlgorithm:
          $ref: '#/components/schemas/Saml2SignatureAlgorithm'
        signingCertificate:
          $ref: '#/components/schemas/CertModel'
        signingPrivateKey:
          $ref: '#/components/schemas/CertModel'
        validateResponse:
          type: boolean
        nameIdPolicy:
          $ref: '#/components/schemas/Saml2NameIdPolicy'
        signAuthnRequest:
          type: boolean
      additionalProperties: false
    Saml2SignatureAlgorithm:
      enum:
        - RsaSha1
        - RsaSha256
        - RsaSha512
      type: string
    SastRuleModel:
      type: object
      properties:
        rule:
          type: string
          nullable: true
      additionalProperties: false
    SastRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    SastRulesModel:
      type: object
      properties:
        rules:
          type: object
          properties:
            None:
              type: string
            Java:
              type: string
            CSharpWinOnly:
              type: string
            VB:
              type: string
            Php:
              type: string
            JavaScript:
              type: string
            Python:
              type: string
            ObjectiveC:
              type: string
            Swift:
              type: string
            CAndCPlusPlus:
              type: string
            Go:
              type: string
            Kotlin:
              type: string
            Sql:
              type: string
            Ruby:
              type: string
            CSharp:
              type: string
            Solidity:
              type: string
          additionalProperties: false
          nullable: true
        useRules:
          type: boolean
      additionalProperties: false
    ScanAgentConnectionSettingsModel:
      type: object
      properties:
        connectionUri:
          type: string
          nullable: true
      additionalProperties: false
    ScanAgentInfoModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        operatingSystem:
          type: string
          nullable: true
        isDeleted:
          type: boolean
      additionalProperties: false
    ScanAgentModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        statusType:
          $ref: '#/components/schemas/ScanAgentStatusType'
        name:
          type: string
          nullable: true
        registeredDateTime:
          type: string
          format: date-time
        lastActiveDateTime:
          type: string
          format: date-time
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
          nullable: true
        projectName:
          type: string
          nullable: true
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        operatingSystem:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    ScanAgentStatusType:
      enum:
        - Pending
        - Scan
        - Suspend
        - Inactive
        - Update
        - Stopping
      type: string
    ScanAppType:
      enum:
        - None
        - Binary
        - Configuration
        - Fingerprint
        - Java
        - CSharpWinOnly
        - PHP
        - PmTaint
        - BlackBox
        - JavaScript
        - DependencyCheck
        - Python
        - Ruby
        - JsaNet
        - Go
        - Pygrep
        - Slither
        - Sca
      type: string
    ScanEnvironmentModel:
      type: object
      properties:
        installatorVersion:
          $ref: '#/components/schemas/ComponentVersionModel'
      additionalProperties: false
    ScanErrorModel:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorBaseModel'
        errorType:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        isCritical:
          type: boolean
        level:
          $ref: '#/components/schemas/ErrorLevel'
        message:
          type: string
          nullable: true
        scanResultId:
          type: string
          format: uuid
      additionalProperties: false
    ScanMode:
      enum:
        - FromEntryPoint
        - FromPublicProtected
        - Taint
        - FromRootFunction
        - Unknown
      type: string
    ScanModuleType:
      enum:
        - VulnerableSourceCode
        - DataFlowAnalysis
        - PatternMatching
        - Components
        - Configuration
        - BlackBox
        - StaticCodeAnalysis
        - SoftwareCompositionAnalysis
      type: string
    ScanProgressModel:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/Stage'
        subStage:
          type: string
          nullable: true
        value:
          type: integer
          format: int32
      additionalProperties: false
    ScanQueueModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        statusType:
          $ref: '#/components/schemas/ScanStatusType'
        scanType:
          $ref: '#/components/schemas/ScanType'
        agentId:
          type: string
          format: uuid
          nullable: true
        agentName:
          type: string
          nullable: true
        scanResultId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        queuingDateTime:
          type: string
          format: date-time
        finishedDateTime:
          type: string
          format: date-time
          nullable: true
        initiator:
          $ref: '#/components/schemas/InitiatorModel'
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    ScanResultModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        settingsId:
          type: string
          format: uuid
        scanDate:
          type: string
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        statistic:
          $ref: '#/components/schemas/ScanStatisticModel'
        statisticDelta:
          $ref: '#/components/schemas/ScanStatisticModel'
        scanEnvironment:
          $ref: '#/components/schemas/ScanEnvironmentModel'
        isRunFromQueue:
          type: boolean
        scanType:
          $ref: '#/components/schemas/ScanType'
        isParentNode:
          type: boolean
        fullScanReason:
          $ref: '#/components/schemas/FullScanReason'
        initiator:
          $ref: '#/components/schemas/InitiatorInfoModel'
        queueDate:
          type: string
          nullable: true
        scanAgentInfo:
          $ref: '#/components/schemas/ScanAgentInfoModel'
        hasDependencyGraph:
          type: boolean
      additionalProperties: false
    ScanScope:
      enum:
        - Folder
        - Domain
        - Path
      type: string
    ScanSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
        programmingLanguages:
          type: array
          items:
            $ref: '#/components/schemas/LegacyProgrammingLanguageGroup'
          nullable: true
        langPercentDistribution:
          type: object
          properties:
            None:
              type: number
              format: double
            Java:
              type: number
              format: double
            CSharpWinOnly:
              type: number
              format: double
            VB:
              type: number
              format: double
            Php:
              type: number
              format: double
            JavaScript:
              type: number
              format: double
            Python:
              type: number
              format: double
            ObjectiveC:
              type: number
              format: double
            Swift:
              type: number
              format: double
            CAndCPlusPlus:
              type: number
              format: double
            Go:
              type: number
              format: double
            Kotlin:
              type: number
              format: double
            Sql:
              type: number
              format: double
            Ruby:
              type: number
              format: double
            CSharp:
              type: number
              format: double
            Solidity:
              type: number
              format: double
          additionalProperties: false
          nullable: true
        scanModules:
          type: array
          items:
            $ref: '#/components/schemas/ScanModuleType'
          nullable: true
        jsaScriptingFolder:
          type: string
          nullable: true
        fileFolderExclusions:
          type: string
          nullable: true
        useSastRules:
          type: boolean
        useSecurityPolicies:
          type: boolean
        skipGitIgnoreFiles:
          type: boolean
        blackBoxSettings:
          $ref: '#/components/schemas/BlackBoxSettingsBaseModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        goSettings:
          $ref: '#/components/schemas/GoSettingsModel'
        jsaDotNetSettings:
          $ref: '#/components/schemas/JsaDotNetSettingsModel'
        javaScriptSettings:
          $ref: '#/components/schemas/JavaScriptSettingsModel'
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        phpSettings:
          $ref: '#/components/schemas/PhpSettingsModel'
        pmTaintSettings:
          $ref: '#/components/schemas/PmTaintSettingsModel'
        pythonSettings:
          $ref: '#/components/schemas/PythonSettingsModel'
        rubySettings:
          $ref: '#/components/schemas/RubySettingsModel'
        pygrepSettings:
          $ref: '#/components/schemas/PygrepSettingsModel'
        scaSettings:
          $ref: '#/components/schemas/ScaSettingsModel'
        sourceSettings:
          $ref: '#/components/schemas/SourceScanSettingsModel'
        emailRecipients:
          type: string
          nullable: true
        sendEmailWithReportsAfterScan:
          type: boolean
        useIssueTrackerIntegration:
          type: boolean
      additionalProperties: false
    ScanStartErrorType:
      enum:
        - None
        - License
        - Sources
        - Language
        - Modules
        - LicenseExpired
        - ScanSchedulerIsLocked
      type: string
    ScanStatisticModel:
      type: object
      properties:
        high:
          type: integer
          format: int32
        medium:
          type: integer
          format: int32
        low:
          type: integer
          format: int32
        potential:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        filesTotal:
          type: integer
          format: int32
        filesScanned:
          type: integer
          format: int32
        urlsScanned:
          type: integer
          format: int32
        urlsTotal:
          type: integer
          format: int32
        scanDuration:
          type: string
          format: date-span
        policyState:
          $ref: '#/components/schemas/PolicyState'
      additionalProperties: false
    ScanStatusType:
      enum:
        - Pending
        - Scheduled
        - Scan
        - Aborted
        - Finished
        - Failed
      type: string
    ScanType:
      enum:
        - Full
        - Incremental
      type: string
    ScaSettingsModel:
      type: object
      properties:
        launchParameters:
          type: string
          nullable: true
        buildDependenciesGraph:
          type: boolean
      additionalProperties: false
    SecurityPoliciesModel:
      type: object
      properties:
        checkSecurityPoliciesAccordance:
          type: boolean
        securityPolicies:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlConnectionSettingsModel:
      type: object
      properties:
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
        repositoryUrl:
          type: string
          nullable: true
        sourceControlCredentialsType:
          $ref: '#/components/schemas/SourceControlCredentialsType'
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        sshKey:
          type: string
          nullable: true
        authenticationToken:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlCredentialsType:
      enum:
        - None
        - Anonymous
        - Password
        - AuthenticationToken
        - BasicUsingHeader
        - SshKey
      type: string
    SourceControlScanSettingsModel:
      type: object
      properties:
        repositoryUrl:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlSettingsModel:
      type: object
      properties:
        projectCollection:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
        includesSubmodules:
          type: boolean
      additionalProperties: false
    SourceScanSettingsModel:
      type: object
      properties:
        scanTargetName:
          type: string
          nullable: true
        sourceType:
          $ref: '#/components/schemas/SourceType'
        vcsSettings:
          $ref: '#/components/schemas/SourceControlScanSettingsModel'
      additionalProperties: false
    SourceType:
      enum:
        - Empty
        - File
        - Folder
        - SourceControl
      type: string
    SSOSettingsModel:
      type: object
      properties:
        sessionLifetime:
          type: string
          format: date-span
        userInactivateInterval:
          type: string
          format: date-span
        blockUsersAfterInactiveIntervalExpires:
          type: boolean
      additionalProperties: false
    Stage:
      enum:
        - Unknown
        - VFSSetup
        - Initialize
        - Precheck
        - Scan
        - Finalize
        - Done
        - Failed
        - Aborted
        - Enqueued
        - Autocheck
      type: string
    StartScanModel:
      type: object
      properties:
        scanType:
          $ref: '#/components/schemas/ScanType'
        additionalParameters:
          type: array
          items:
            $ref: '#/components/schemas/StringStringKeyValuePair'
          nullable: true
      additionalProperties: false
    StatusType:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    StringStringKeyValuePair:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    SyslogFormat:
      enum:
        - Plain
        - Json
        - Cef
      type: string
    SyslogTargetModel:
      type: object
      properties:
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        isEnabled:
          type: boolean
        logFormat:
          $ref: '#/components/schemas/SyslogFormat'
        logLevel:
          $ref: '#/components/schemas/LogLevel'
      additionalProperties: false
    TemplateValidationResult:
      type: object
      properties:
        hasErrors:
          type: boolean
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TestMailModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatchModel'
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
        emailRecipient:
          type: string
          nullable: true
      additionalProperties: false
    ThreatLevel:
      enum:
        - None
        - Potential
        - Low
        - Medium
        - High
      type: string
    TicketModels:
      type: object
      properties:
        key:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        ticketType:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldInfoModel'
          nullable: true
      additionalProperties: false
    TicketTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    TrackerModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TrackerType'
        authType:
          type: array
          items:
            $ref: '#/components/schemas/IssueTrackerAuthType'
          nullable: true
      additionalProperties: false
    TrackerType:
      enum:
        - Unknown
        - Jira
        - Tfs
        - Youtrack
      type: string
    UpdateMemberModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/MemberRoleModel'
          nullable: true
      additionalProperties: false
    UpdateProjectMemberModel:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roleIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    UpdaterInfoModel:
      type: object
      properties:
        tokenName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
      additionalProperties: false
    UploadSessionModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        maxBytes:
          type: integer
          format: int32
        maxFiles:
          type: integer
          format: int32
      additionalProperties: false
    UserMappingFieldType:
      enum:
        - Login
        - Name
        - Email
      type: string
    UserMappingModel:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/UserMappingFieldType'
        value:
          type: string
          nullable: true
        canEdit:
          type: boolean
      additionalProperties: false
    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
      additionalProperties: false
    UserReportFiltersModel:
      type: object
      properties:
        types:
          type: array
          items:
            type: string
          nullable: true
        levelHigh:
          type: boolean
          nullable: true
        levelMedium:
          type: boolean
          nullable: true
        levelLow:
          type: boolean
          nullable: true
        levelPotential:
          type: boolean
          nullable: true
        statusUndefined:
          type: boolean
          nullable: true
        statusConfirmed:
          type: boolean
          nullable: true
        statusConfirmedAuto:
          type: boolean
          nullable: true
        statusRejected:
          type: boolean
          nullable: true
        modeEntryPoint:
          type: boolean
          nullable: true
        modePublicMethods:
          type: boolean
          nullable: true
        modeRootFunction:
          type: boolean
          nullable: true
        modeOthers:
          type: boolean
          nullable: true
        foundThisScan:
          type: boolean
          nullable: true
        foundPrevScan:
          type: boolean
          nullable: true
        conditional:
          type: boolean
          nullable: true
        nonConditional:
          type: boolean
          nullable: true
        suppressed:
          type: boolean
          nullable: true
        nonSuppressed:
          type: boolean
          nullable: true
        suspected:
          type: boolean
          nullable: true
        secondLevel:
          type: boolean
          nullable: true
        noPlaceToFix:
          type: boolean
          nullable: true
        onlyFavorite:
          type: boolean
          nullable: true
        scanModules:
          type: array
          items:
            $ref: '#/components/schemas/ScanModuleType'
          nullable: true
        limit:
          type: integer
          format: int32
          nullable: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
          nullable: true
      additionalProperties: false
    UserReportParametersModel:
      type: object
      properties:
        useFilters:
          type: boolean
        includeDFD:
          type: boolean
        includeGlossary:
          type: boolean
        includeComments:
          type: boolean
        reportTemplateId:
          type: string
          format: uuid
      additionalProperties: false
    UserTrackerModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    VulnerabilityFullModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hash:
          type: string
          nullable: true
        scanResultId:
          type: string
          format: uuid
        counter:
          type: integer
          format: int64
        function:
          type: string
          nullable: true
        bestPlaceToFix:
          $ref: '#/components/schemas/CodeChunkModel'
        vulnerableExpression:
          $ref: '#/components/schemas/CodeChunkModel'
        type:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        scanMode:
          $ref: '#/components/schemas/ScanMode'
        isFavorite:
          type: boolean
        approvalState:
          $ref: '#/components/schemas/IssueApprovalState'
        isSuppressed:
          type: boolean
        isSuspected:
          type: boolean
        issueType:
          $ref: '#/components/schemas/IssueType'
        scanModule:
          $ref: '#/components/schemas/ScanModuleType'
        vulnerableConfiguration:
          $ref: '#/components/schemas/VulnerableConfigurationModel'
        vulnerableComponent:
          $ref: '#/components/schemas/VulnerableComponentFullModel'
        vulnerableScaComponent:
          $ref: '#/components/schemas/VulnerableScaComponentModel'
        yaraMatch:
          $ref: '#/components/schemas/YaraMatchModel'
        blackBox:
          $ref: '#/components/schemas/BlackboxVulnerabilytyModel'
        jiraTicketLink:
          $ref: '#/components/schemas/JiraTicketLinkModel'
        vulnerableCode:
          $ref: '#/components/schemas/VulnerableCodeModel'
        pygrep:
          $ref: '#/components/schemas/PygrepVulnerabilityModel'
        language:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
      additionalProperties: false
    VulnerabilityModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hash:
          type: string
          nullable: true
        counter:
          type: integer
          format: int64
        isNew:
          type: boolean
        isSecondOrder:
          type: boolean
        type:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        scanMode:
          $ref: '#/components/schemas/ScanMode'
        isFavorite:
          type: boolean
        approvalState:
          $ref: '#/components/schemas/IssueApprovalState'
        hasJiraTicket:
          type: boolean
        isSuppressed:
          type: boolean
        isSuspected:
          type: boolean
        vulnerableValue:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        function:
          type: string
          nullable: true
        scanModule:
          $ref: '#/components/schemas/ScanModuleType'
        bestPlaceToFixFile:
          type: string
          nullable: true
        bestPlaceToFixLine:
          type: integer
          format: int32
          nullable: true
        entryPointFile:
          type: string
          nullable: true
        entryPointLine:
          type: integer
          format: int32
          nullable: true
        sourceFile:
          type: string
          nullable: true
        sourceBeginLine:
          type: integer
          format: int32
          nullable: true
        sourceEndLine:
          type: integer
          format: int32
          nullable: true
        sourceBeginColumn:
          type: integer
          format: int32
          nullable: true
        sourceEndColumn:
          type: integer
          format: int32
          nullable: true
        vulnerableComponent:
          $ref: '#/components/schemas/VulnerableComponentModel'
        vulnerableScaComponent:
          $ref: '#/components/schemas/VulnerableComponentModel'
        hasAdditionalConditions:
          type: boolean
        language:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
      additionalProperties: false
    VulnerableCodeModel:
      type: object
      properties:
        entryPoint:
          $ref: '#/components/schemas/CodeChunkModel'
        dataTrace:
          type: array
          items:
            $ref: '#/components/schemas/CodeChunkModel'
          nullable: true
        taintDataEntries:
          type: array
          items:
            $ref: '#/components/schemas/CodeChunkModel'
          nullable: true
        autocheckExploit:
          type: string
          nullable: true
        requestExploit:
          type: string
          nullable: true
        condition:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableComponentFullModel:
      type: object
      properties:
        cveIds:
          type: array
          items:
            type: string
          nullable: true
        component:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableComponentModel:
      type: object
      properties:
        component:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableConfigurationModel:
      type: object
      properties:
        existingValue:
          type: string
          nullable: true
        recommendedValue:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableScaComponentModel:
      type: object
      properties:
        licenses:
          type: array
          items:
            type: string
          nullable: true
        ptOsvs:
          type: array
          items:
            $ref: '#/components/schemas/PtOsvModel'
          nullable: true
        component:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    WafPatchGenerateModel:
      type: object
      properties:
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
        localeId:
          type: string
          nullable: true
        filters:
          $ref: '#/components/schemas/UserReportFiltersModel'
      additionalProperties: false
    WhiteBoxSettingsModel:
      type: object
      properties:
        staticCodeAnalysisEnabled:
          type: boolean
        patternMatchingEnabled:
          type: boolean
        searchForVulnerableComponentsEnabled:
          type: boolean
        searchForConfigurationFlawsEnabled:
          type: boolean
        searchWithScaEnabled:
          type: boolean
      additionalProperties: false
    YaraMatchModel:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        ruleName:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please insert JWT with Bearer into field
      name: Authorization
      in: header
security:
  - Bearer: [ ]
